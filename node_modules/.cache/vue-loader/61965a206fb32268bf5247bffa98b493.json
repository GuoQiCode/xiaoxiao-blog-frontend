{"remainingRequest":"E:\\xiaoxiao-blog-frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!E:\\xiaoxiao-blog-frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\xiaoxiao-blog-frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\xiaoxiao-blog-frontend\\src\\components\\share\\body.vue?vue&type=template&id=f8233a3c&scoped=true&","dependencies":[{"path":"E:\\xiaoxiao-blog-frontend\\src\\components\\share\\body.vue","mtime":1579591773701},{"path":"E:\\xiaoxiao-blog-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\xiaoxiao-blog-frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"E:\\xiaoxiao-blog-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\xiaoxiao-blog-frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}