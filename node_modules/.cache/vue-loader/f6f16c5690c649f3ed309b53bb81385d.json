{"remainingRequest":"E:\\vue\\xiaoxiao-blog-frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\vue\\xiaoxiao-blog-frontend\\src\\components\\newArticle\\Body.vue?vue&type=template&id=5accf59b&scoped=true&","dependencies":[{"path":"E:\\vue\\xiaoxiao-blog-frontend\\src\\components\\newArticle\\Body.vue","mtime":1578969093971},{"path":"E:\\vue\\xiaoxiao-blog-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vue\\xiaoxiao-blog-frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"E:\\vue\\xiaoxiao-blog-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vue\\xiaoxiao-blog-frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}