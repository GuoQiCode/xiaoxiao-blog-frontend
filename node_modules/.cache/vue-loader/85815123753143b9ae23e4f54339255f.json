{"remainingRequest":"E:\\xiaoxiao-blog-frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\xiaoxiao-blog-frontend\\src\\components\\recommend\\body.vue?vue&type=template&id=5211cea5&scoped=true&","dependencies":[{"path":"E:\\xiaoxiao-blog-frontend\\src\\components\\recommend\\body.vue","mtime":1579578885061},{"path":"E:\\xiaoxiao-blog-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\xiaoxiao-blog-frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"E:\\xiaoxiao-blog-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\xiaoxiao-blog-frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}